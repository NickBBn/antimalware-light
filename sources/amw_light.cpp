//
// Created by niickson on 7/3/21
//

#include "amw_light.hpp"

amw_light::amw_light(const std::string &path_to_dir)
    : directory(path_to_dir)
    , suspicious_js(0)
    , suspicious_unix(0)
    , suspicious_mac(0)
    , err_count(0)
    , files_count(0)
    , microsec_time(0)
    {}

void amw_light::scan() {
    std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now();
    if (!fs::is_directory(directory)){
        std::cout << directory << " is not a directory" << std::endl;
        return;
    } else if (is_empty(directory)) {
        std::cout << directory << " is an empty directory" << std::endl;
        return;
    }
    for (const auto& file : fs::directory_iterator(directory)) {
        if (!fs::is_regular_file(file)) continue;
        scan_file(file);
    }
    std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();
    microsec_time = std::chrono::duration_cast<std::chrono::microseconds>
            (end - begin).count();
    print_results(std::cout);
}

void amw_light::print_results(std::ostream &out) const {
    out << "=========== SCAN RESULT ============ " << std::endl
        << directory.c_str() << " scanned "<< std::endl
        << "Processed files " << files_count << std::endl
        << "JS detects " << suspicious_js << std::endl
        << "Unix detects " << suspicious_unix << std::endl
        << "macOS detects " << suspicious_mac << std::endl
        << "Errors " << err_count << std::endl
        << "Execution time " << microsec_time << " microseconds" << std::endl
        << "==================================== " << std::endl;
}

void amw_light::scan_file(const fs::directory_entry& file) {
    static const std::string js_extension(".js");
    static const std::string susp_js_string("<script>evil_script()</script>");
    static const std::string susp_unix_string("rm -rf ~/Documents");
    static const std::string susp_mac_string(
            "system(\"launchctl load /Library/LaunchAgents/com.malware.agent\")");
    try {
        std::string extension = file.path().extension();
        std::ifstream cur_file(file.path().c_str());
        if (!cur_file.is_open())
            throw std::runtime_error("Could not open file");
        std::string cur_line;
        while (std::getline(cur_file, cur_line)) {
            if (cur_line == susp_js_string && extension == js_extension) {
                suspicious_js++;
                break;
            } else if (cur_line == susp_unix_string) {
                suspicious_unix++;
                break;
            } else if (cur_line == susp_mac_string) {
                suspicious_mac++;
                break;
            }
        }
        cur_file.close();
    } catch (...) {
        err_count++;
    }
    files_count++;
}
